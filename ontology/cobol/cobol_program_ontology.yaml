# COBOL Program Ontology
# Structured representation of COBOL programs for analysis and modernization

version: "1.0"
namespace: "https://github.com/llm-code-grapher/ontology/cobol"
description: "Ontology for describing COBOL program structure, relationships, and business logic"

concepts:
  Program:
    description: "A complete COBOL program"
    properties:
      - name: "Program identifier"
        type: "string"
        required: true
      - complexity: "Overall program complexity score"
        type: "float"
        range: [0.0, 1.0]
      - quality_score: "Program quality assessment"
        type: "float"
        range: [0.0, 1.0]
      - modernization_potential: "Potential for modernization"
        type: "enum"
        values: ["LOW", "MEDIUM", "HIGH"]
      - maintenance_risks: "List of maintenance risks"
        type: "array"
        items: "string"
      - business_domain: "Business domain classification"
        type: "string"
        examples: ["FINANCE", "HEALTHCARE", "MANUFACTURING", "GOVERNMENT"]

  Division:
    description: "COBOL program divisions (IDENTIFICATION, ENVIRONMENT, DATA, PROCEDURE)"
    types:
      - IDENTIFICATION: "Program identification and metadata"
      - ENVIRONMENT: "Environment configuration and computer specifications"
      - DATA: "Data structure definitions"
      - PROCEDURE: "Main program logic"
    properties:
      - name: "Division name"
        type: "string"
        required: true
      - line_range: "Line number range"
        type: "tuple"
        items: ["integer", "integer"]
      - business_logic: "Description of division purpose"
        type: "string"
      - confidence: "Analysis confidence level"
        type: "float"
        range: [0.0, 1.0]
      - complexity_score: "Division complexity"
        type: "float"
        range: [0.0, 1.0]
      - risk_level: "Maintenance risk level"
        type: "enum"
        values: ["LOW", "MEDIUM", "HIGH", "CRITICAL"]

  Section:
    description: "COBOL sections within divisions"
    types:
      - FILE: "File control and data definitions"
      - WORKING_STORAGE: "Working storage variables"
      - PROCEDURE_SECTION: "Procedure sections"
      - INPUT_OUTPUT: "Input/output specifications"
      - CONFIGURATION: "Configuration settings"
    properties:
      - name: "Section name"
        type: "string"
        required: true
      - parent_division: "Parent division name"
        type: "string"
        required: true
      - line_range: "Line number range"
        type: "tuple"
        items: ["integer", "integer"]
      - line_count: "Number of lines"
        type: "integer"
        minimum: 1
      - business_logic: "Description of section purpose"
        type: "string"
      - confidence: "Analysis confidence level"
        type: "float"
        range: [0.0, 1.0]
      - complexity_score: "Section complexity"
        type: "float"
        range: [0.0, 1.0]
      - risk_level: "Maintenance risk level"
        type: "enum"
        values: ["LOW", "MEDIUM", "HIGH", "CRITICAL"]

  Subsection:
    description: "COBOL subsections (paragraphs) within sections"
    properties:
      - name: "Subsection name"
        type: "string"
        required: true
      - parent_section: "Parent section name"
        type: "string"
        required: true
      - line_range: "Line number range"
        type: "tuple"
        items: ["integer", "integer"]
      - line_count: "Number of lines"
        type: "integer"
        minimum: 1
      - business_logic: "Description of subsection purpose"
        type: "string"
      - confidence: "Analysis confidence level"
        type: "float"
        range: [0.0, 1.0]
      - complexity_score: "Subsection complexity"
        type: "float"
        range: [0.0, 1.0]
      - risk_level: "Maintenance risk level"
        type: "enum"
        values: ["LOW", "MEDIUM", "HIGH", "CRITICAL"]

  DataItem:
    description: "COBOL data items and variables"
    types:
      - PIC: "Picture clause data items"
      - REDEFINES: "Redefines data items"
      - FILLER: "Filler data items"
      - GROUP_ITEM: "Group level data items"
      - OCCURS: "Occurs data items"
      - INDEX: "Index data items"
    properties:
      - name: "Data item name"
        type: "string"
        required: true
      - type: "Data item type"
        type: "enum"
        values: ["PIC", "REDEFINES", "FILLER", "GROUP_ITEM", "OCCURS", "INDEX"]
        required: true
      - level: "COBOL level number"
        type: "integer"
        range: [1, 99]
        required: true
      - parent_item: "Parent data item name"
        type: "string"
      - business_meaning: "Business meaning of the data item"
        type: "string"
      - usage_patterns: "How the data item is used"
        type: "array"
        items: "string"
        examples: ["VALIDATE", "CALCULATE", "DISPLAY", "STORE", "RETRIEVE"]
      - data_type: "COBOL data type"
        type: "string"
        examples: ["PIC 9(8)V99", "PIC X(20)", "PIC S9(4) COMP"]

  BusinessRule:
    description: "Business rules implemented in the program"
    properties:
      - rule_id: "Unique rule identifier"
        type: "string"
        required: true
      - description: "Rule description"
        type: "string"
        required: true
      - section: "Section where rule is implemented"
        type: "string"
        required: true
      - confidence: "Rule extraction confidence"
        type: "float"
        range: [0.0, 1.0]
      - risk_impact: "Risk impact if rule fails"
        type: "enum"
        values: ["LOW", "MEDIUM", "HIGH", "CRITICAL"]
      - modernization_priority: "Priority for modernization"
        type: "enum"
        values: ["LOW", "MEDIUM", "HIGH", "CRITICAL"]
      - compliance_requirements: "Compliance requirements"
        type: "array"
        items: "string"
        examples: ["SOX", "PCI-DSS", "HIPAA", "GDPR"]

  Relationship:
    description: "Relationships between program components"
    types:
      - CALLS: "One component calls another"
      - USES: "One component uses data from another"
      - MODIFIES: "One component modifies data in another"
      - DEPENDS_ON: "One component depends on another"
      - DATA_FLOW: "Data flows between components"
      - CONTROL_FLOW: "Control flows between components"
      - IMPLEMENTS: "One component implements a business rule"
      - CONTAINS: "One component contains another"
    properties:
      - source: "Source component name"
        type: "string"
        required: true
      - target: "Target component name"
        type: "string"
        required: true
      - relationship_type: "Type of relationship"
        type: "enum"
        values: ["CALLS", "USES", "MODIFIES", "DEPENDS_ON", "DATA_FLOW", "CONTROL_FLOW", "IMPLEMENTS", "CONTAINS"]
        required: true
      - confidence: "Relationship confidence"
        type: "float"
        range: [0.0, 1.0]
      - strength: "Relationship strength"
        type: "float"
        range: [0.0, 1.0]
      - frequency: "How often the relationship is used"
        type: "enum"
        values: ["RARE", "OCCASIONAL", "FREQUENT", "ALWAYS"]

  QualityMetrics:
    description: "Program quality metrics and indicators"
    properties:
      - cyclomatic_complexity: "Cyclomatic complexity score"
        type: "float"
        range: [0.0, 100.0]
      - maintainability_index: "Maintainability index"
        type: "float"
        range: [0.0, 1.0]
      - technical_debt_ratio: "Technical debt ratio"
        type: "float"
        range: [0.0, 1.0]
      - code_coverage: "Code coverage level"
        type: "enum"
        values: ["LOW", "MEDIUM", "HIGH"]
      - documentation_quality: "Documentation quality"
        type: "enum"
        values: ["LOW", "MEDIUM", "HIGH"]
      - test_coverage: "Test coverage level"
        type: "enum"
        values: ["LOW", "MEDIUM", "HIGH"]
      - coupling_degree: "Degree of coupling"
        type: "enum"
        values: ["LOW", "MEDIUM", "HIGH"]
      - cohesion_degree: "Degree of cohesion"
        type: "enum"
        values: ["LOW", "MEDIUM", "HIGH"]

relationships:
  contains:
    - "Program -> Division"
    - "Division -> Section"
    - "Section -> Subsection"
    - "Program -> DataItem"
    - "Program -> BusinessRule"
  
  calls:
    - "Subsection -> Subsection"
    - "Section -> Section"
  
  uses:
    - "Subsection -> DataItem"
    - "Section -> DataItem"
  
  modifies:
    - "Subsection -> DataItem"
    - "Section -> DataItem"
  
  implements:
    - "Subsection -> BusinessRule"
    - "Section -> BusinessRule"
  
  depends_on:
    - "Section -> Section"
    - "Subsection -> Subsection"
    - "DataItem -> DataItem"
  
  data_flow:
    - "DataItem -> DataItem"
    - "Subsection -> Subsection"
  
  control_flow:
    - "Subsection -> Subsection"
    - "Section -> Section"

constraints:
  - "Subsection parent_section must exist in sections"
  - "Section parent_division must exist in divisions"
  - "DataItem parent_item must exist in data_items (if specified)"
  - "Relationship source and target must exist in program components"
  - "Confidence values must be between 0.0 and 1.0"
  - "Complexity scores must be between 0.0 and 1.0"
  - "Line ranges must be valid (start <= end)"
  - "Line counts must match line ranges"

validation_rules:
  - name: "ontology_consistency"
    description: "Ensure ontology maintains internal consistency"
    checks:
      - "All parent references exist"
      - "All relationship endpoints exist"
      - "Confidence values are valid"
      - "Complexity scores are valid"
      - "Line ranges are consistent"
  
  - name: "business_logic_completeness"
    description: "Ensure business logic is extracted for all components"
    checks:
      - "All sections have business_logic"
      - "All subsections have business_logic"
      - "All data items have business_meaning"
      - "All business rules have descriptions"
  
  - name: "relationship_accuracy"
    description: "Ensure relationships are accurate and meaningful"
    checks:
      - "No self-referencing relationships"
      - "Relationship types are appropriate"
      - "Confidence thresholds are met"
      - "Strength values are reasonable"

examples:
  program:
    name: "FRAUD-MGMT-SYSTEM"
    complexity: 0.75
    quality_score: 0.68
    modernization_potential: "MEDIUM"
    business_domain: "FINANCE"
    maintenance_risks: ["High coupling", "Complex business logic", "Legacy data formats"]
  
  section:
    name: "MAIN-CONTROL-SECTION"
    parent_division: "PROCEDURE DIVISION"
    line_range: [216, 222]
    line_count: 7
    business_logic: "Main program control flow and execution sequence"
    confidence: 0.92
    complexity_score: 0.75
    risk_level: "MEDIUM"
  
  subsection:
    name: "0000-MAIN-PROCESS"
    parent_section: "MAIN-CONTROL-SECTION"
    line_range: [217, 221]
    line_count: 5
    business_logic: "Main processing loop that handles transaction validation"
    confidence: 0.88
    complexity_score: 0.65
    risk_level: "LOW"
  
  data_item:
    name: "WS-TRANSACTION-AMOUNT"
    type: "PIC"
    level: 1
    business_meaning: "Transaction amount in dollars and cents"
    usage_patterns: ["VALIDATE", "CALCULATE", "DISPLAY", "STORE"]
    data_type: "PIC 9(8)V99"
  
  business_rule:
    rule_id: "RULE-001"
    description: "Validate transaction amount is positive and within limits"
    section: "VALIDATE-TRANSACTION"
    confidence: 0.95
    risk_impact: "HIGH"
    modernization_priority: "CRITICAL"
    compliance_requirements: ["PCI-DSS", "SOX"]
  
  relationship:
    source: "0000-MAIN-PROCESS"
    target: "1000-INITIALIZE-PROGRAM"
    relationship_type: "CALLS"
    confidence: 0.95
    strength: 1.0
    frequency: "ALWAYS"
